// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PropertyManager.API.Data;

#nullable disable

namespace PropertyManager.API.Migrations
{
    [DbContext(typeof(PropertyContext))]
    partial class PropertyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PropertyManager.API.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int?>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GarageSize")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRental")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<int?>("LotSize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParkingSpaces")
                        .HasColumnType("int");

                    b.Property<int?>("PoolSize")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PropertyConditionId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyConditionId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PropertyCoolingId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyCoolingId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PropertyHeatingId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyRoofId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyStatusId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PropertyStyleId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyStyleId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyTypeId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("RentalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SquareFeet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Stories")
                        .HasColumnType("int");

                    b.Property<int?>("YearBuilt")
                        .HasColumnType("int");

                    b.Property<int?>("YearRenovated")
                        .HasColumnType("int");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyConditionId1");

                    b.HasIndex("PropertyCoolingId1");

                    b.HasIndex("PropertyHeatingId");

                    b.HasIndex("PropertyStatusId1");

                    b.HasIndex("PropertyStyleId1");

                    b.HasIndex("PropertyTypeId1");

                    b.ToTable("Property", (string)null);
                });

            modelBuilder.Entity("PropertyManager.API.Models.PropertyCondition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyCondition", (string)null);
                });

            modelBuilder.Entity("PropertyManager.API.Models.PropertyCooling", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyCooling", (string)null);
                });

            modelBuilder.Entity("PropertyManager.API.Models.PropertyHeating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyHeating", (string)null);
                });

            modelBuilder.Entity("PropertyManager.API.Models.PropertyStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyStatus", (string)null);
                });

            modelBuilder.Entity("PropertyManager.API.Models.PropertyStyle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyStyle", (string)null);
                });

            modelBuilder.Entity("PropertyManager.API.Models.PropertyType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyType", (string)null);
                });

            modelBuilder.Entity("PropertyManager.API.Models.Property", b =>
                {
                    b.HasOne("PropertyManager.API.Models.PropertyCondition", "PropertyCondition")
                        .WithMany()
                        .HasForeignKey("PropertyConditionId1");

                    b.HasOne("PropertyManager.API.Models.PropertyCooling", "PropertyCooling")
                        .WithMany()
                        .HasForeignKey("PropertyCoolingId1");

                    b.HasOne("PropertyManager.API.Models.PropertyHeating", "PropertyHeating")
                        .WithMany()
                        .HasForeignKey("PropertyHeatingId");

                    b.HasOne("PropertyManager.API.Models.PropertyStatus", "PropertyStatus")
                        .WithMany()
                        .HasForeignKey("PropertyStatusId1");

                    b.HasOne("PropertyManager.API.Models.PropertyStyle", "PropertyStyle")
                        .WithMany()
                        .HasForeignKey("PropertyStyleId1");

                    b.HasOne("PropertyManager.API.Models.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId1");

                    b.Navigation("PropertyCondition");

                    b.Navigation("PropertyCooling");

                    b.Navigation("PropertyHeating");

                    b.Navigation("PropertyStatus");

                    b.Navigation("PropertyStyle");

                    b.Navigation("PropertyType");
                });
#pragma warning restore 612, 618
        }
    }
}
